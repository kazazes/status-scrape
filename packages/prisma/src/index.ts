// Code generated by Prisma (prisma@1.17.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { GraphQLSchema } from "graphql";
import { IResolvers } from "graphql-tools/dist/Interfaces";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  statusScrapeTarget: (
    where?: StatusScrapeTargetWhereInput
  ) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export interface Fragmentable {
  $fragment<T>(fragment: string | Object): T;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;
  $getAbstractResolvers(filterSchema?: GraphQLSchema | string): IResolvers;

  /**
   * Queries
   */

  statusScrapeTarget: (
    where: StatusScrapeTargetWhereUniqueInput
  ) => StatusScrapeTarget;
  statusScrapeTargets: (
    args?: {
      where?: StatusScrapeTargetWhereInput;
      orderBy?: StatusScrapeTargetOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<StatusScrapeTargetNode>>;
  statusScrapeTargetsConnection: (
    args?: {
      where?: StatusScrapeTargetWhereInput;
      orderBy?: StatusScrapeTargetOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => StatusScrapeTargetConnection;
  user: (where: UserWhereUniqueInput) => User;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<UserNode>>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createStatusScrapeTarget: (
    data: StatusScrapeTargetCreateInput
  ) => StatusScrapeTarget;
  updateStatusScrapeTarget: (
    args: {
      data: StatusScrapeTargetUpdateInput;
      where: StatusScrapeTargetWhereUniqueInput;
    }
  ) => StatusScrapeTarget;
  updateManyStatusScrapeTargets: (
    args: {
      data: StatusScrapeTargetUpdateInput;
      where?: StatusScrapeTargetWhereInput;
    }
  ) => BatchPayload;
  upsertStatusScrapeTarget: (
    args: {
      where: StatusScrapeTargetWhereUniqueInput;
      create: StatusScrapeTargetCreateInput;
      update: StatusScrapeTargetUpdateInput;
    }
  ) => StatusScrapeTarget;
  deleteStatusScrapeTarget: (
    where: StatusScrapeTargetWhereUniqueInput
  ) => StatusScrapeTarget;
  deleteManyStatusScrapeTargets: (
    where?: StatusScrapeTargetWhereInput
  ) => BatchPayload;
  createUser: (data: UserCreateInput) => User;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => User;
  updateManyUsers: (
    args: { data: UserUpdateInput; where?: UserWhereInput }
  ) => BatchPayload;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => User;
  deleteUser: (where: UserWhereUniqueInput) => User;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  statusScrapeTarget: (
    where?: StatusScrapeTargetSubscriptionWhereInput
  ) => StatusScrapeTargetSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type StatusScrapeTargetOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "twitterHandle_ASC"
  | "twitterHandle_DESC"
  | "strategy_ASC"
  | "strategy_DESC"
  | "statusUrl_ASC"
  | "statusUrl_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ScrapeStrategy = "STATUSPAGE";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserUpdateInput {
  name?: String;
  email?: String;
  password?: String;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export type StatusScrapeTargetWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
  twitterHandle?: String;
  statusUrl?: String;
}>;

export interface StatusScrapeTargetWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  twitterHandle?: String;
  twitterHandle_not?: String;
  twitterHandle_in?: String[] | String;
  twitterHandle_not_in?: String[] | String;
  twitterHandle_lt?: String;
  twitterHandle_lte?: String;
  twitterHandle_gt?: String;
  twitterHandle_gte?: String;
  twitterHandle_contains?: String;
  twitterHandle_not_contains?: String;
  twitterHandle_starts_with?: String;
  twitterHandle_not_starts_with?: String;
  twitterHandle_ends_with?: String;
  twitterHandle_not_ends_with?: String;
  strategy?: ScrapeStrategy;
  strategy_not?: ScrapeStrategy;
  strategy_in?: ScrapeStrategy[] | ScrapeStrategy;
  strategy_not_in?: ScrapeStrategy[] | ScrapeStrategy;
  statusUrl?: String;
  statusUrl_not?: String;
  statusUrl_in?: String[] | String;
  statusUrl_not_in?: String[] | String;
  statusUrl_lt?: String;
  statusUrl_lte?: String;
  statusUrl_gt?: String;
  statusUrl_gte?: String;
  statusUrl_contains?: String;
  statusUrl_not_contains?: String;
  statusUrl_starts_with?: String;
  statusUrl_not_starts_with?: String;
  statusUrl_ends_with?: String;
  statusUrl_not_ends_with?: String;
  AND?: StatusScrapeTargetWhereInput[] | StatusScrapeTargetWhereInput;
  OR?: StatusScrapeTargetWhereInput[] | StatusScrapeTargetWhereInput;
  NOT?: StatusScrapeTargetWhereInput[] | StatusScrapeTargetWhereInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface StatusScrapeTargetCreateInput {
  name: String;
  twitterHandle?: String;
  strategy?: ScrapeStrategy;
  statusUrl: String;
}

export interface StatusScrapeTargetUpdateInput {
  name?: String;
  twitterHandle?: String;
  strategy?: ScrapeStrategy;
  statusUrl?: String;
}

export interface UserCreateInput {
  name: String;
  email: String;
  password: String;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface StatusScrapeTargetSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: StatusScrapeTargetWhereInput;
  AND?:
    | StatusScrapeTargetSubscriptionWhereInput[]
    | StatusScrapeTargetSubscriptionWhereInput;
  OR?:
    | StatusScrapeTargetSubscriptionWhereInput[]
    | StatusScrapeTargetSubscriptionWhereInput;
  NOT?:
    | StatusScrapeTargetSubscriptionWhereInput[]
    | StatusScrapeTargetSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserConnectionNode {}

export interface UserConnection
  extends Promise<UserConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<UserEdgeNode>>>() => T;
  aggregate: <T = AggregateUser>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<UserEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserPreviousValuesNode {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
}

export interface UserPreviousValues
  extends Promise<UserPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface StatusScrapeTargetConnectionNode {}

export interface StatusScrapeTargetConnection
  extends Promise<StatusScrapeTargetConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<StatusScrapeTargetEdgeNode>>>() => T;
  aggregate: <T = AggregateStatusScrapeTarget>() => T;
}

export interface StatusScrapeTargetConnectionSubscription
  extends Promise<AsyncIterator<StatusScrapeTargetConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<Array<StatusScrapeTargetEdgeSubscription>>>
  >() => T;
  aggregate: <T = AggregateStatusScrapeTargetSubscription>() => T;
}

export interface UserNode {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
}

export interface User extends Promise<UserNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<UserNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface UserEdgeNode {
  cursor: String;
}

export interface UserEdge extends Promise<UserEdgeNode>, Fragmentable {
  node: <T = User>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdgeNode>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateStatusScrapeTargetNode {
  count: Int;
}

export interface AggregateStatusScrapeTarget
  extends Promise<AggregateStatusScrapeTargetNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStatusScrapeTargetSubscription
  extends Promise<AsyncIterator<AggregateStatusScrapeTargetNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface StatusScrapeTargetSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface StatusScrapeTargetSubscriptionPayload
  extends Promise<StatusScrapeTargetSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StatusScrapeTarget>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StatusScrapeTargetPreviousValues>() => T;
}

export interface StatusScrapeTargetSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StatusScrapeTargetSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StatusScrapeTargetSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StatusScrapeTargetPreviousValuesSubscription>() => T;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface StatusScrapeTargetEdgeNode {
  cursor: String;
}

export interface StatusScrapeTargetEdge
  extends Promise<StatusScrapeTargetEdgeNode>,
    Fragmentable {
  node: <T = StatusScrapeTarget>() => T;
  cursor: () => Promise<String>;
}

export interface StatusScrapeTargetEdgeSubscription
  extends Promise<AsyncIterator<StatusScrapeTargetEdgeNode>>,
    Fragmentable {
  node: <T = StatusScrapeTargetSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUserNode {
  count: Int;
}

export interface AggregateUser
  extends Promise<AggregateUserNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUserNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface StatusScrapeTargetPreviousValuesNode {
  id: ID_Output;
  name: String;
  twitterHandle?: String;
  strategy: ScrapeStrategy;
  statusUrl: String;
}

export interface StatusScrapeTargetPreviousValues
  extends Promise<StatusScrapeTargetPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  twitterHandle: () => Promise<String>;
  strategy: () => Promise<ScrapeStrategy>;
  statusUrl: () => Promise<String>;
}

export interface StatusScrapeTargetPreviousValuesSubscription
  extends Promise<AsyncIterator<StatusScrapeTargetPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  twitterHandle: () => Promise<AsyncIterator<String>>;
  strategy: () => Promise<AsyncIterator<ScrapeStrategy>>;
  statusUrl: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayload
  extends Promise<UserSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = User>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValues>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface StatusScrapeTargetNode {
  id: ID_Output;
  name: String;
  twitterHandle?: String;
  strategy: ScrapeStrategy;
  statusUrl: String;
}

export interface StatusScrapeTarget
  extends Promise<StatusScrapeTargetNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  twitterHandle: () => Promise<String>;
  strategy: () => Promise<ScrapeStrategy>;
  statusUrl: () => Promise<String>;
}

export interface StatusScrapeTargetSubscription
  extends Promise<AsyncIterator<StatusScrapeTargetNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  twitterHandle: () => Promise<AsyncIterator<String>>;
  strategy: () => Promise<AsyncIterator<ScrapeStrategy>>;
  statusUrl: () => Promise<AsyncIterator<String>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  endpoint: "https://us1.prisma.sh/peter-k/status-scrape/dev"
});
export const prisma = new Prisma();
